#!/bin/bash
########################################################################################
#    Copyright (C) 2010-2017 by Nestor F. Aguirre                                      #
#    nfaguirrec@gmail.com                                                              #
#                                                                                      #
#    Redistribution and use in source and binary forms, with or without                #
#    modification, are permitted provided that the following conditions are met:       #
#                                                                                      #
#    1. Redistributions of source code must retain the above copyright notice, this    #
#       list of conditions and the following disclaimer.                               #
#    2. Redistributions in binary form must reproduce the above copyright notice,      #
#       this list of conditions and the following disclaimer in the documentation      #
#       and/or other materials provided with the distribution.                         #
#                                                                                      #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND   #
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED     #
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE            #
#    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR   #
#    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    #
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;      #
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND       #
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT        #
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS     #
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                      #
########################################################################################

DATA_DIR="/var/tmp/$USER/sjobq.data"
COUNTER_FILE="$DATA_DIR/counter"
STOP_FILE="$DATA_DIR/stop"
REFRESH_INTERVAL="2"
CURRENT_JOB_HOME="$DATA_DIR/current"

##
# @brief
##
diffTime()
{
	local time0=`echo $1 | sed 's/@/ /g'`
	local time1=`echo $2 | sed 's/@/ /g'`
	
	local DAYS=""
	local HOURS=""
	local MINUTES=""
	local SECONDS=""
	
	# %F = full date, %T = %H:%M:%S, %N = nanoseconds, %Z = time zone.
	
	DAYS=$(( $(printf '%s' $(( $(date -u -d"$time0" +%s) - $(date -u -d"$time1" +%s)))) / 60 / 60 / 24 ))
	time1=$(date -d"$time1 +$DAYS days" '+%F %T.%N %Z')
	HOURS=$(( $(printf '%s' $(( $(date -u -d"$time0" +%s) - $(date -u -d"$time1" +%s)))) / 60 / 60 ))
	time1=$(date -d"$time1 +$HOURS hours" '+%F %T.%N %Z')
	MINUTES=$(( $(printf '%s' $(( $(date -u -d"$time0" +%s) - $(date -u -d"$time1" +%s)))) / 60 ))
	time1=$(date -d"$time1 +$MINUTES minutes" '+%F %T.%N %Z')
	SECONDS=$(printf '%s' $(( $(date -u -d"$time0" +%s) - $(date -u -d"$time1" +%s))))

	printf "%02d-%02d:%02d:%02d\n" "$DAYS" "$HOURS" "$MINUTES" "$SECONDS"
}

##
# @brief
##
function refreshQueue()
{
	simultaneousJobs=`cat $DATA_DIR/sjobs`
	for cid in `seq 1 $simultaneousJobs`
	do
		local lastID="`cat $CURRENT_JOB_HOME-$cid/pid 2> /dev/null`"
		local currentPID=""
		
		# Checks if the job is still running
		if [ -z "`ps -u $USER | awk -v id=$lastID '($1==id){print "1"}'`" ]
		then
			pushd . &> /dev/null
			cd $DATA_DIR
			IDL="`ls *.bid  2> /dev/null | sed '{s/[.].*//g}' | sort -n | head -n1`"
			popd &> /dev/null
			
			# Saves the command to the history file
			# exactly after this has finished
			if [ "`cat $CURRENT_JOB_HOME-$cid/alive`" -eq "1" ]
			then
				beginTime=`date -u '+%F %T.%N %Z' | sed 's/ /@/g'`
				endTime=$(cat $CURRENT_JOB_HOME-$cid/beginTime)
				
				echo "command      = `cat $CURRENT_JOB_HOME-$cid/com`" >> $DATA_DIR/history
				echo "dir          = `cat $CURRENT_JOB_HOME-$cid/pwd`" >> $DATA_DIR/history
				echo "time spent   = `diffTime $beginTime $endTime`" >> $DATA_DIR/history
				echo "" >> $DATA_DIR/history
			fi
			
			# Flag that indicates the end of the job
			echo "0" > $CURRENT_JOB_HOME-$cid/alive
			
			# If the previous job has finished, it will run the next command in the queue
			if [ -n "$IDL" ]
			then
				# Register the begin time
				echo $(date -u '+%F %T.%N %Z' | sed 's/ /@/g') > $CURRENT_JOB_HOME-$cid/beginTime
				
				# this will go to the appropriate directory
				# where the command should be to executed
				pushd . &> /dev/null
				cd `cat $DATA_DIR/$IDL.pwd`
				
				# this builds a litle script that run the command using nohup
				# and updates the files necesary files for register it
				randId=$RAND
				echo "#!/bin/bash" > .tmp$randId
				cat $DATA_DIR/$IDL.com | sed '{s/^/nohup /g;s/$/ \&/g}' >> .tmp$randId
				echo "echo \$! > $CURRENT_JOB_HOME-$cid/pid" >> .tmp$randId
				
				chmod +x .tmp$randId
				bash ./.tmp$randId
				rm .tmp$randId
				
				rm -f $DATA_DIR/$IDL.bid
				mv $DATA_DIR/$IDL.com $CURRENT_JOB_HOME-$cid/com
				mv $DATA_DIR/$IDL.pwd $CURRENT_JOB_HOME-$cid/pwd
				
				# this will return to the original directory
				popd &> /dev/null
				
				sleep 2
				
				currentPID="`cat $CURRENT_JOB_HOME-$cid/pid`"
				pstree -p $currentPID > $CURRENT_JOB_HOME-$cid/tree
				pstree -p $currentPID | awk 'BEGIN{RS="[()]"}($0~/^[[:digit:]]+$/){printf $0" "}' | sed 's/$/\n/' > $CURRENT_JOB_HOME-$cid/pids
				
				# Flag that indicate the begin of the job
				echo "1" > $CURRENT_JOB_HOME-$cid/alive
			fi
			
			if [ -d "$CURRENT_JOB_HOME-$cid" ]
			then
				echo -n "Saving data for process $CURRENT_JOB_HOME-$cid ... "
			else
				echo -n "Making data directory for process in $CURRENT_JOB_HOME-$cid ... "
				mkdir $CURRENT_JOB_HOME-$cid && echo "OK"
			fi
		fi
	done
}

##
# @brief
##
function startDaemon()
{
	while [ 1 ]
	do
		if [ -f $STOP_FILE ]
		then
			rm $STOP_FILE
			exit
		fi
			
		sleep $REFRESH_INTERVAL
		refreshQueue  > /dev/null
	done
}

##
# @brief
##
function stopDaemon()
{
	echo "" > $STOP_FILE
	sleep $REFRESH_INTERVAL
	
	if [ "$1" = "clean"  ]
	then
		simultaneousJobs=`cat $DATA_DIR/sjobs`
		for cid in `seq 1 $simultaneousJobs`
		do
			if [ -d "$CURRENT_JOB_HOME-$cid" ]
			then
				procIDList=`cat $CURRENT_JOB_HOME-$cid/pids`
				procIDFirst=`echo $procIDList | awk '{print $1}'`
				
				if [ -n "`ps -u $USER | awk '{print $1}' | grep "$procIDFirst"`" ]
				then
					kill -9 $procIDList
				fi
				
				echo "Job with id=current-$cid has been deleted !!"
				
			fi
		done
		
		rm -rf $DATA_DIR
		echo "The SjobQ configuration has been cleaned up successfully !!"
	fi
}

##
# @brief
##
function pauseCurrentJob()
{
	simultaneousJobs=`cat $DATA_DIR/sjobs`
	for cid in `seq 1 $simultaneousJobs`
	do
		if [ -d "$CURRENT_JOB_HOME-$cid" ]
		then
			procIDList=`cat $CURRENT_JOB_HOME-$cid/pids`
			procIDFirst=`echo $procIDList | awk '{print $1}'`
			
			if [ -n "`ps -u $USER | awk '{print $1}' | grep "$procIDFirst"`" ]
			then
				kill -STOP $procIDList
			fi
				
			echo "Current-$cid job has been paused !!"
		fi
	done
}

##
# @brief
##
function continueCurrentJob()
{
	simultaneousJobs=`cat $DATA_DIR/sjobs`
	for cid in `seq 1 $simultaneousJobs`
	do
		if [ -d "$CURRENT_JOB_HOME-$cid" ]
		then
			procIDList=`cat $CURRENT_JOB_HOME-$cid/pids`
			procIDFirst=`echo $procIDList | awk '{print $1}'`
			
			if [ -n "`ps -u $USER | awk '{print $1}' | grep "$procIDFirst"`" ]
			then
				kill -CONT $procIDList
			fi
				
			echo "Current-$cid job has been continued !!"
		fi
	done
}

##
# @brief
##
function main()
{
	case $1 in
		start)
			runningID=`ps -u $USER | grep "sjobq.daemon$" | head -n1 | awk '{print $1; exit}'`
			
			if [ "$runningID" -ne "$$" ]
			then
				echo "### Error ### The daemon sjobq.daemon is already running"
				echo "              You might want to run \"sjobq.daemon stop\" to stop it."
				exit 1
			fi
				
			if [ ! -d "$DATA_DIR" ]
			then
				mkdir -p $DATA_DIR
			fi
			
			nohup $0 __start > $DATA_DIR/log 2> $DATA_DIR/err &
			
			simultaneousJobs=$2
			[ -z "$simultaneousJobs" ] && simultaneousJobs=1
			echo $simultaneousJobs > $DATA_DIR/sjobs
			
			echo "==============================="
			echo " SJobQ daemon has been started"
			echo "==============================="
			;;
		stop)
			nRunningID=`ps -u $USER | grep "sjobq.daemon$" | wc -l`
			
			if [ "$nRunningID" -gt 2 ]  # @todo I can not understand why 2 insted 1
			then
				stopDaemon $2
				
				echo "==============================="
				echo " SJobQ daemon has been stopped"
				echo "==============================="
			else
				echo "### Error ### The daemon sjobq.daemon is not running"
				echo "              You might want to run \"sjobq.daemon start\" to correct this."
				exit 1
			fi
			
			;;
		pause)
			pauseCurrentJob
			;;
		cont)
			continueCurrentJob
			;;
		restart)
			stopDaemon $2
			
			if [ ! -d "$DATA_DIR" ]
			then
				mkdir -p $DATA_DIR
			fi
			
			nohup $0 __start > $DATA_DIR/log 2> $DATA_DIR/err &
			
			echo "================================="
			echo " SJobQ daemon has been restarted"
			echo "================================="
			;;
		__start)
			startDaemon
			;;
		*)
			echo "Usage: sjobq.daemon {start|stop|restart}"
			;;
	esac
}

main $*
